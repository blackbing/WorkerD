
/*
 RequireJS text 1.0.7 Copyright (c) 2010-2011, The Dojo Foundation All Rights Reserved.
 Available via the MIT or new BSD license.
 see: http://github.com/jrburke/requirejs for details
*/
(function(){var k=["Msxml2.XMLHTTP","Microsoft.XMLHTTP","Msxml2.XMLHTTP.4.0"],n=/^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,o=/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,i=typeof location!=="undefined"&&location.href,p=i&&location.protocol&&location.protocol.replace(/\:/,""),q=i&&location.hostname,r=i&&(location.port||void 0),j=[];define('text',[],function(){var g,h,l;typeof window!=="undefined"&&window.navigator&&window.document?h=function(a,c){var b=g.createXhr();b.open("GET",a,!0);b.onreadystatechange=
function(){b.readyState===4&&c(b.responseText)};b.send(null)}:typeof process!=="undefined"&&process.versions&&process.versions.node?(l=require.nodeRequire("fs"),h=function(a,c){var b=l.readFileSync(a,"utf8");b.indexOf("\ufeff")===0&&(b=b.substring(1));c(b)}):typeof Packages!=="undefined"&&(h=function(a,c){var b=new java.io.File(a),e=java.lang.System.getProperty("line.separator"),b=new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(b),"utf-8")),d,f,g="";try{d=new java.lang.StringBuffer;
(f=b.readLine())&&f.length()&&f.charAt(0)===65279&&(f=f.substring(1));for(d.append(f);(f=b.readLine())!==null;)d.append(e),d.append(f);g=String(d.toString())}finally{b.close()}c(g)});return g={version:"1.0.7",strip:function(a){if(a){var a=a.replace(n,""),c=a.match(o);c&&(a=c[1])}else a="";return a},jsEscape:function(a){return a.replace(/(['\\])/g,"\\$1").replace(/[\f]/g,"\\f").replace(/[\b]/g,"\\b").replace(/[\n]/g,"\\n").replace(/[\t]/g,"\\t").replace(/[\r]/g,"\\r")},createXhr:function(){var a,c,
b;if(typeof XMLHttpRequest!=="undefined")return new XMLHttpRequest;else for(c=0;c<3;c++){b=k[c];try{a=new ActiveXObject(b)}catch(e){}if(a){k=[b];break}}if(!a)throw Error("createXhr(): XMLHttpRequest not available");return a},get:h,parseName:function(a){var c=!1,b=a.indexOf("."),e=a.substring(0,b),a=a.substring(b+1,a.length),b=a.indexOf("!");b!==-1&&(c=a.substring(b+1,a.length),c=c==="strip",a=a.substring(0,b));return{moduleName:e,ext:a,strip:c}},xdRegExp:/^((\w+)\:)?\/\/([^\/\\]+)/,useXhr:function(a,
c,b,e){var d=g.xdRegExp.exec(a),f;if(!d)return!0;a=d[2];d=d[3];d=d.split(":");f=d[1];d=d[0];return(!a||a===c)&&(!d||d===b)&&(!f&&!d||f===e)},finishLoad:function(a,c,b,e,d){b=c?g.strip(b):b;d.isBuild&&(j[a]=b);e(b)},load:function(a,c,b,e){if(e.isBuild&&!e.inlineText)b();else{var d=g.parseName(a),f=d.moduleName+"."+d.ext,m=c.toUrl(f),h=e&&e.text&&e.text.useXhr||g.useXhr;!i||h(m,p,q,r)?g.get(m,function(c){g.finishLoad(a,d.strip,c,b,e)}):c([f],function(a){g.finishLoad(d.moduleName+"."+d.ext,d.strip,a,
b,e)})}},write:function(a,c,b){if(c in j){var e=g.jsEscape(j[c]);b.asModule(a+"!"+c,"define(function () { return '"+e+"';});\n")}},writeFile:function(a,c,b,e,d){var c=g.parseName(c),f=c.moduleName+"."+c.ext,h=b.toUrl(c.moduleName+"."+c.ext)+".js";g.load(f,b,function(){var b=function(a){return e(h,a)};b.asModule=function(a,b){return e.asModule(a,h,b)};g.write(a,f,b,d)},d)}}})})();

define('text!lib/WorkerD/worker_console.js',[],function () { return '// Generated by CoffeeScript 1.6.2\n(function() {\n  var attr, console_attr, _i, _len,\n    _this = this;\n\n  this.postDebugMessage = function(type, args) {\n    return postMessage({\n      debug: type,\n      args: args\n    });\n  };\n\n  console_attr = [\'debug\', \'error\', \'info\', \'log\', \'warn\', \'dir\', \'dirxml\', \'trace\', \'assert\', \'count\', \'markTimeline\', \'profile\', \'profileEnd\', \'time\', \'timeEnd\', \'timeStamp\', \'group\', \'groupCollapsed\', \'groupEnd\'];\n\n  this.console = {};\n\n  for (_i = 0, _len = console_attr.length; _i < _len; _i++) {\n    attr = console_attr[_i];\n    this.console[attr] = (function(attr) {\n      return function() {\n        return _this.postDebugMessage(attr, arguments);\n      };\n    })(attr);\n  }\n\n}).call(this);\n';});

define('text!lib/WorkerD/worker_event.js',[],function () { return '// Generated by CoffeeScript 1.6.2\n(function() {\n  var Callbacks,\n    _this = this;\n\n  Callbacks = {};\n\n  this.send = function(id, data) {\n    var res;\n\n    res = {};\n    res.msgId = id;\n    res[id] = data;\n    return self.postMessage(res);\n  };\n\n  this.on = function(id, callback) {\n    return Callbacks[id] = callback;\n  };\n\n  this.off = function(id) {\n    return delete Callbacks[id];\n  };\n\n  this.addEventListener("message", function(event) {\n    var data, id, msgData;\n\n    data = event.data;\n    if ((data.msgId != null) && (data.msgData != null)) {\n      id = data.msgId;\n      msgData = data.msgData;\n      if (Callbacks[id]) {\n        return Callbacks[id](msgData);\n      }\n    }\n  });\n\n}).call(this);\n';});

// Generated by CoffeeScript 1.6.2
(function() {
  define('lib/WorkerD/worker_util',['require','text!./worker_console.js','text!./worker_event.js'],function(require) {
    var URL, WorkerUtil, importRequirejs, requirejsPath, worker_console_js, worker_event_js;

    worker_console_js = require('text!./worker_console.js');
    worker_event_js = require('text!./worker_event.js');
    requirejsPath = 'http://requirejs.org/docs/release/2.1.5/minified/require.js';
    importRequirejs = "importScripts('" + requirejsPath + "');";
    URL = window.URL || window.webkitURL;
    WorkerUtil = (function() {
      var append_console, consoleStyle, getSharedWorkerURL, options, prepareInlineDebug, storeSharedWorkerURL;

      consoleStyle = 'background: #000; color: #FFF;';

      append_console = function(content, opts) {
        var jsContent;

        jsContent = [];
        if (opts.enableRequire) {
          console.info('enableRequire');
          jsContent.push(importRequirejs);
        }
        if (opts.enableDebug) {
          console.info('enableDebug');
          jsContent.push(worker_console_js);
        }
        jsContent.push(worker_event_js);
        jsContent.push(content);
        return jsContent.join("\n");
      };

      prepareInlineDebug = function(inlineWorker, opts) {
        var _this = this;

        inlineWorker.addEventListener('message', function(event) {
          var args, data;

          if (!opts.enableDebug) {
            return false;
          }
          data = event.data;
          if (typeof data === 'object' && (data.debug != null)) {
            console.group("%c console from worker", consoleStyle);
            args = _.toArray(data.args);
            console[data.debug].apply(console, args);
            return console.groupEnd("%c console from worker", consoleStyle);
          }
        }, false);
        inlineWorker.addEventListener('error', function(event) {
          console.group("error from worker");
          console.error(event);
          return console.groupEnd("error from worker");
        }, false);
        return inlineWorker;
      };

      storeSharedWorkerURL = function(name, url) {
        return localStorage.setItem(name, url);
      };

      getSharedWorkerURL = function(name) {
        return localStorage.getItem(name);
      };

      options = {
        enableDebug: true,
        enableRequire: true
      };

      function WorkerUtil(opts) {
        options = _.extend(options, opts);
        this.options = options;
      }

      WorkerUtil.prototype.createInlineWorker = function(content, opts) {
        var blobWorker, blobWorker_url, inlineWorker;

        opts = _.extend(options, opts);
        content = append_console(content, opts);
        blobWorker = new Blob([content], {
          type: 'application/javascript'
        });
        blobWorker_url = URL.createObjectURL(blobWorker);
        inlineWorker = new Worker(blobWorker_url);
        prepareInlineDebug(inlineWorker, opts);
        URL.revokeObjectURL(blobWorker_url);
        return inlineWorker;
      };

      WorkerUtil.prototype.createInlineSharedWorker = function(content, name) {
        var blobWorker, blobWorker_url, inlineURL, inlineWorker;

        inlineURL = getSharedWorkerURL(name);
        if (inlineURL) {
          blobWorker_url = inlineURL;
        } else {
          blobWorker = new Blob([content], {
            type: 'application/javascript'
          });
          blobWorker_url = URL.createObjectURL(blobWorker);
          storeSharedWorkerURL(name, blobWorker_url);
        }
        inlineWorker = new SharedWorker(blobWorker_url, name);
        prepareInlineDebug(inlineWorker);
        URL.revokeObjectURL(blobWorker_url);
        return inlineWorker;
      };

      return WorkerUtil;

    })();
    return new WorkerUtil();
  });

}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
  define('lib/WorkerD/WorkerD',['require','./worker_util'],function(require) {
    var WorkerD, worker_util;

    worker_util = require('./worker_util');
    return WorkerD = (function() {
      var dfr, o, onMessage;

      dfr = $.Deferred();

      o = $({});

      onMessage = function(event) {
        var data;

        data = event.data;
        if (typeof data === 'object' && (data.msgId != null)) {
          return o.trigger(data.msgId, [data[data.msgId], event]);
        }
      };

      function WorkerD(inlineWorker_js, opts) {
        this.worker = worker_util.createInlineWorker(inlineWorker_js, opts);
        this.worker.addEventListener('message', onMessage);
      }

      WorkerD.prototype.send = function(id, msgData, options) {
        var msg;

        msg = {
          msgId: id,
          msgData: msgData
        };
        return this.worker.postMessage.apply(this.worker, [msg, options]);
      };

      WorkerD.prototype.on = function(id, handle) {
        return o.on.apply(o, arguments);
      };

      WorkerD.prototype.terminate = function() {
        return this.worker.terminate();
      };

      return WorkerD;

    })();
  });

}).call(this);
