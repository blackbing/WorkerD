// Generated by CoffeeScript 1.6.2
(function() {
  define(function(require) {
    var URL, WorkerUtil, importRequirejs, requirejsPath, worker_console_js, worker_event_js;

    worker_console_js = require('text!./worker_console.js');
    worker_event_js = require('text!./worker_event.js');
    requirejsPath = 'http://requirejs.org/docs/release/2.1.5/minified/require.js';
    importRequirejs = "importScripts('" + requirejsPath + "');";
    URL = window.URL || window.webkitURL;
    WorkerUtil = (function() {
      var append_console, getSharedWorkerURL, options, prepareInlineDebug, storeSharedWorkerURL;

      append_console = function(content, opts) {
        var jsContent;

        jsContent = [];
        if (opts.enableRequire) {
          console.info('enableRequire');
          jsContent.push(importRequirejs);
        }
        if (opts.enableDebug) {
          console.info('enableDebug');
          jsContent.push(worker_console_js);
        }
        jsContent.push(worker_event_js);
        jsContent.push(content);
        return jsContent.join("\n");
      };

      prepareInlineDebug = function(inlineWorker, opts) {
        var _this = this;

        inlineWorker.addEventListener('message', function(event) {
          var args, data;

          if (!opts.enableDebug) {
            return false;
          }
          data = event.data;
          if (typeof data === 'object' && (data.debug != null)) {
            console.group("console from worker");
            args = _.toArray(data.args);
            console[data.debug].apply(console, args);
            return console.groupEnd("console from worker");
          }
        }, false);
        inlineWorker.addEventListener('error', function(event) {
          console.group("error from worker");
          console.error(event);
          return console.groupEnd("error from worker");
        }, false);
        return inlineWorker;
      };

      storeSharedWorkerURL = function(name, url) {
        return localStorage.setItem(name, url);
      };

      getSharedWorkerURL = function(name) {
        return localStorage.getItem(name);
      };

      options = {
        enableDebug: true,
        enableRequire: true
      };

      function WorkerUtil(opts) {
        options = _.extend(options, opts);
        this.options = options;
      }

      WorkerUtil.prototype.createInlineWorker = function(content, opts) {
        var blobWorker, blobWorker_url, inlineWorker;

        opts = _.extend(options, opts);
        content = append_console(content, opts);
        blobWorker = new Blob([content], {
          type: 'application/javascript'
        });
        blobWorker_url = URL.createObjectURL(blobWorker);
        inlineWorker = new Worker(blobWorker_url);
        prepareInlineDebug(inlineWorker, opts);
        URL.revokeObjectURL(blobWorker_url);
        return inlineWorker;
      };

      WorkerUtil.prototype.createInlineSharedWorker = function(content, name) {
        var blobWorker, blobWorker_url, inlineURL, inlineWorker;

        inlineURL = getSharedWorkerURL(name);
        if (inlineURL) {
          blobWorker_url = inlineURL;
        } else {
          blobWorker = new Blob([content], {
            type: 'application/javascript'
          });
          blobWorker_url = URL.createObjectURL(blobWorker);
          storeSharedWorkerURL(name, blobWorker_url);
        }
        inlineWorker = new SharedWorker(blobWorker_url, name);
        prepareInlineDebug(inlineWorker);
        URL.revokeObjectURL(blobWorker_url);
        return inlineWorker;
      };

      return WorkerUtil;

    })();
    return new WorkerUtil();
  });

}).call(this);
