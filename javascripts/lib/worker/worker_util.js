// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require) {
    var URL, WorkerUtil, worker_console_js;
    worker_console_js = require('text!./worker_console.js');
    URL = window.URL || window.webkitURL;
    WorkerUtil = (function() {
      var append_console, getSharedWorkerURL, options, prepareInlineDebug, storeSharedWorkerURL;

      append_console = function(content) {
        content = worker_console_js + '\n' + content;
        return content;
      };

      prepareInlineDebug = function(inlineWorker) {
        var _this = this;
        inlineWorker.addEventListener('message', function(event) {
          var args, data;
          if (!options.enableDebug) {
            return false;
          }
          data = event.data;
          if (typeof data === 'object' && (data.debug != null)) {
            console.log("╭console from worker╮");
            args = _.toArray(data.args);
            console[data.debug].apply(console, args);
            return console.log("╰───────────────────╯");
          }
        }, false);
        inlineWorker.addEventListener('error', function(event) {
          return console.error(event);
        }, false);
        return inlineWorker;
      };

      storeSharedWorkerURL = function(name, url) {
        return localStorage.setItem(name, url);
      };

      getSharedWorkerURL = function(name) {
        return localStorage.getItem(name);
      };

      options = {
        enableDebug: true
      };

      function WorkerUtil(opts) {
        options = _.extend(options, opts);
        this.options = options;
      }

      WorkerUtil.prototype.createInlineWorker = function(content) {
        var blobWorker, blobWorker_url, inlineWorker;
        content = append_console(content);
        blobWorker = new Blob([content], {
          type: 'application/javascript'
        });
        blobWorker_url = URL.createObjectURL(blobWorker);
        inlineWorker = new Worker(blobWorker_url);
        prepareInlineDebug(inlineWorker);
        URL.revokeObjectURL(blobWorker_url);
        return inlineWorker;
      };

      WorkerUtil.prototype.createInlineSharedWorker = function(content, name) {
        var blobWorker, blobWorker_url, inlineURL, inlineWorker;
        inlineURL = getSharedWorkerURL(name);
        if (inlineURL) {
          blobWorker_url = inlineURL;
        } else {
          blobWorker = new Blob([content], {
            type: 'application/javascript'
          });
          blobWorker_url = URL.createObjectURL(blobWorker);
          storeSharedWorkerURL(name, blobWorker_url);
        }
        inlineWorker = new SharedWorker(blobWorker_url, name);
        prepareInlineDebug(inlineWorker);
        URL.revokeObjectURL(blobWorker_url);
        return inlineWorker;
      };

      return WorkerUtil;

    })();
    return new WorkerUtil();
  });

}).call(this);
